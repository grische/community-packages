#!/usr/bin/lua

local uci = require('simple-uci').cursor()

local dropbear_key_path = '/etc/dropbear/authorized_keys'
local ssh_manager_block_begin = '#SSH-Manager-Group-Keys-Begin'

local enabled = uci:get_bool('gluon-ssh-manager', 'settings', 'enabled')
local groups = uci:get('gluon-ssh-manager', 'settings', 'groups')

local function file_exists(file)
	local f = io.open(file)
	if not f then
		return false
	end
	f:close()
	return true
end

-- Abort if disabled or no group set
if not enabled then
	return
end

local num_group_keys = 0
local group_keys = {}
if groups ~= nil then
	for _, group in ipairs(groups) do
		local group_key_path = '/lib/gluon/ssh-manager/groups/' .. group

		if file_exists(group_key_path) then
			-- Add group keys
			for line in io.lines(group_key_path) do
				table.insert(group_keys, line)
				num_group_keys = num_group_keys + 1
			end
		end
	end
end


-- Read user-keys
local user_keys = {}
local ssh_manager_block = false
for line in io.lines(dropbear_key_path) do
	if line:match('^' .. ssh_manager_block_begin) then
		ssh_manager_block = true
	end

	if not ssh_manager_block then
		table.insert(user_keys, line)
	end
end

-- Write authorized_keys
-- Overwrite existing content
local file = io.open(dropbear_key_path, 'w')
for _, key in ipairs(user_keys) do
	file:write(key, '\n')
end

if num_group_keys > 0 then
	file:write(ssh_manager_block_begin, '\n')
	for _, key in ipairs(group_keys) do
		file:write(key, '\n')
	end
end
file:close()
